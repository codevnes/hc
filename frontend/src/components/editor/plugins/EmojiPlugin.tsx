'use client';

import { useEffect, useState } from 'react';
import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';
import {
  $getSelection,
  $isRangeSelection,
  COMMAND_PRIORITY_EDITOR,
  createCommand,
  LexicalCommand,
} from 'lexical';
import { $insertNodes } from 'lexical';
import { $createTextNode } from 'lexical';

export const INSERT_EMOJI_COMMAND: LexicalCommand<string> = createCommand();

export default function EmojiPlugin(): JSX.Element | null {
  const [editor] = useLexicalComposerContext();

  useEffect(() => {
    return editor.registerCommand<string>(
      INSERT_EMOJI_COMMAND,
      (emoji) => {
        const selection = $getSelection();
        if (!$isRangeSelection(selection)) {
          return false;
        }

        const emojiTextNode = $createTextNode(emoji);
        selection.insertNodes([emojiTextNode]);

        return true;
      },
      COMMAND_PRIORITY_EDITOR
    );
  }, [editor]);

  return null;
}

const EMOJI_CATEGORIES = {
  smileys: {
    name: 'M·∫∑t c∆∞·ªùi & Bi·ªÉu c·∫£m',
    emojis: ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò']
  },
  gestures: {
    name: 'C·ª≠ ch·ªâ & Con ng∆∞·ªùi',
    emojis: ['üëç', 'üëé', 'üëå', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëã', 'üôå', 'üëè', 'ü§ù']
  },
  animals: {
    name: 'ƒê·ªông v·∫≠t & Thi√™n nhi√™n',
    emojis: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'ü¶Å', 'üêØ', 'üêÆ', 'üê∑']
  }, 
  food: {
    name: 'ƒê·ªì ƒÉn & Th·ª©c u·ªëng',
    emojis: ['üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç']
  },
  travel: {
    name: 'Du l·ªãch & ƒê·ªãa ƒëi·ªÉm',
    emojis: ['üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üõ¥', 'üö≤', '‚úàÔ∏è']
  }
};

export function EmojiPickerDialog({ onClose, onSelect }: { onClose: () => void, onSelect: (emoji: string) => void }) {
  const [activeCategory, setActiveCategory] = useState<keyof typeof EMOJI_CATEGORIES>('smileys');

  return (
    <div className="absolute z-50 mt-1 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 max-w-[320px]">
      <div className="p-2">
        <div className="flex border-b pb-1 mb-2">
          {Object.keys(EMOJI_CATEGORIES).map((category) => (
            <button
              key={category}
              className={`p-1 mr-1 rounded-md ${activeCategory === category ? 'bg-gray-100 dark:bg-gray-700' : ''}`}
              onClick={() => setActiveCategory(category as keyof typeof EMOJI_CATEGORIES)}
              title={EMOJI_CATEGORIES[category as keyof typeof EMOJI_CATEGORIES].name}
            >
              {EMOJI_CATEGORIES[category as keyof typeof EMOJI_CATEGORIES].emojis[0]}
            </button>
          ))}
        </div>
        
        <div className="grid grid-cols-8 gap-1">
          {EMOJI_CATEGORIES[activeCategory].emojis.map((emoji) => (
            <button
              key={emoji}
              className="w-8 h-8 flex items-center justify-center text-lg hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md"
              onClick={() => {
                onSelect(emoji);
                onClose();
              }}
            >
              {emoji}
            </button>
          ))}
        </div>
      </div>
      
      <div className="border-t px-2 py-1 text-xs text-gray-500 dark:text-gray-400 flex justify-between">
        <span>{EMOJI_CATEGORIES[activeCategory].name}</span>
        <button onClick={onClose} className="text-gray-600 dark:text-gray-300">ƒê√≥ng</button>
      </div>
    </div>
  );
} 